-- Author : pwq1989
-- Email  : pwq1989@gmail.com
--
-- Licensed under the Apache License, Version 2.0 (the "License");
-- you may not use this file except in compliance with the License.
-- You may obtain a copy of the License at
--
--     http://www.apache.org/licenses/LICENSE-2.0
--
-- Unless required by applicable law or agreed to in writing, software
-- distributed under the License is distributed on an "AS IS" BASIS,
-- WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-- See the License for the specific language governing permissions and
-- limitations under the License.

local sample_code = {}

sample_code.route_all_code = [[ 
-- Author : pwq1989
-- Email  : pwq1989@gmail.com
--
-- Licensed under the Apache License, Version 2.0 (the "License");
-- you may not use this file except in compliance with the License.
-- You may obtain a copy of the License at
--
--     http://www.apache.org/licenses/LICENSE-2.0
--
-- Unless required by applicable law or agreed to in writing, software
-- distributed under the License is distributed on an "AS IS" BASIS,
-- WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-- See the License for the specific language governing permissions and
-- limitations under the License.

-- NOTE! THIS FILE IS AUTO-GENERATED BY META.LUA, DON'T CHANGE IT UNLESS YOU KNOW WHAT YOU ARE DOING
local route_auto_1_entry 

local ok, app = pcall(require, "{{route_app_name}}")
if not ok then
	error("app files is not in correct package path, maybe should re-generate files" 
	      .. app)
end

local context = require "context"
local util = require "util"

local ctx = context:new()

local method = util.get_method()
if method == "GET" then
	app.do_get(ctx)	
elseif  method == "POST" then
	app.do_post(ctx)
elseif method == "PUT" then
	app.do_put(ctx)
elseif method == "DELETE" then
	app.do_delete(ctx)
else 
	error("not suppot this method, please add it in this manually")
end

]]

sample_code.log_all_code = [[
-- Author : pwq1989
-- Email  : pwq1989@gmail.com
--
-- Licensed under the Apache License, Version 2.0 (the "License");
-- you may not use this file except in compliance with the License.
-- You may obtain a copy of the License at
--
--     http://www.apache.org/licenses/LICENSE-2.0
--
-- Unless required by applicable law or agreed to in writing, software
-- distributed under the License is distributed on an "AS IS" BASIS,
-- WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-- See the License for the specific language governing permissions and
-- limitations under the License.
--
-- NOTE! THIS FILE IS AUTO-GENERATED BY META.LUA, DON'T CHANGE IT UNLESS YOU KNOW WHAT YOU ARE DOING
local {{log_name}}_auto_logger = {}

local util = require "util"

function check_{{log_name}}_log_params(params) 
	{{log_check_code}}
end

function check_{{log_name}}_log_params_type(...) 
	for _,v in { ... } do
		if type(v) ~= 'table' then
			error("log params must be type(table) " .. debug.traceback())
		end
	end
end

function {{log_name}}_auto_logger.write(data, ...) 
	if data == nil then
		error("log param is nil" .. debug.traceback())
	end
	local params = util.merge_table(data, ...)

	{{check_log_params_function_call}}
	
	local log_url = {{log_url_section}}

	ngx.location.capture(log_url)
end

{{log_name}}_auto_logger.name = "{{log_name}}"
{{log_name}}_auto_logger.log_file = "{{log_filename}}"
return {{log_name}}_auto_logger 
]]

sample_code.log_check_code = [[  
	if params['{{key}}'] == nil then error("failure in test log params checker, {{key}} is nil" .. debug.traceback()) end
]]

sample_code.nginx_location_section1 = [[	
	# this location is auto-generated
	location {{route_path}} {
		{{route_properties}}
		content_by_lua_file {{route_app_file}};
	}
]]

sample_code.nginx_log_param_list = [[
	set_unescape_uri $r_{{log_param_name}} $arg_{{log_param_name}};
]]

sample_code.nginx_log_location_section1 = [[
	# this location is auto-generated
	location /{{log_name}}_log_path {
		internal;
		{{log_param_list}}

		log_format {{log_name}}_log_format {{log_format_string}};

		log_subrequest on;
		access_log {{nginx_log_dir}}/{{log_file}} {{log_name}}_log_format;
		echo '';
	}
]]

return sample_code 
